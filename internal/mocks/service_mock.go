// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/est-water-api/internal/service/water (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/est-water-api/internal/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateWater mocks base method.
func (m *MockService) CreateWater(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 uint32) (*model.Water, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWater", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*model.Water)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWater indicates an expected call of CreateWater.
func (mr *MockServiceMockRecorder) CreateWater(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWater", reflect.TypeOf((*MockService)(nil).CreateWater), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DescribeWater mocks base method.
func (m *MockService) DescribeWater(arg0 context.Context, arg1 uint64) (*model.Water, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWater", arg0, arg1)
	ret0, _ := ret[0].(*model.Water)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWater indicates an expected call of DescribeWater.
func (mr *MockServiceMockRecorder) DescribeWater(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWater", reflect.TypeOf((*MockService)(nil).DescribeWater), arg0, arg1)
}

// ListWaters mocks base method.
func (m *MockService) ListWaters(arg0 context.Context, arg1, arg2 uint64) ([]model.Water, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWaters", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Water)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWaters indicates an expected call of ListWaters.
func (mr *MockServiceMockRecorder) ListWaters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWaters", reflect.TypeOf((*MockService)(nil).ListWaters), arg0, arg1, arg2)
}

// RemoveWater mocks base method.
func (m *MockService) RemoveWater(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWater", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWater indicates an expected call of RemoveWater.
func (mr *MockServiceMockRecorder) RemoveWater(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWater", reflect.TypeOf((*MockService)(nil).RemoveWater), arg0, arg1)
}

// UpdateWater mocks base method.
func (m *MockService) UpdateWater(arg0 context.Context, arg1 uint64, arg2 string, arg3 uint32) (*model.Water, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWater", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.Water)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWater indicates an expected call of UpdateWater.
func (mr *MockServiceMockRecorder) UpdateWater(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWater", reflect.TypeOf((*MockService)(nil).UpdateWater), arg0, arg1, arg2, arg3)
}
