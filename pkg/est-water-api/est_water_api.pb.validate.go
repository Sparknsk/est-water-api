// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/est_water_api/v1/est_water_api.proto

package est_water_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Water with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Water) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Model

	// no validation rules for Manufacturer

	// no validation rules for Material

	// no validation rules for Speed

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaterValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WaterValidationError is the validation error returned by Water.Validate if
// the designated constraints aren't met.
type WaterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaterValidationError) ErrorName() string { return "WaterValidationError" }

// Error satisfies the builtin error interface
func (e WaterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWater.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaterValidationError{}

// Validate checks the field values on WaterEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WaterEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for WaterId

	// no validation rules for Type

	// no validation rules for Status

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaterEventValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaterEventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaterEventValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WaterEventValidationError is the validation error returned by
// WaterEvent.Validate if the designated constraints aren't met.
type WaterEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaterEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaterEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaterEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaterEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaterEventValidationError) ErrorName() string { return "WaterEventValidationError" }

// Error satisfies the builtin error interface
func (e WaterEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaterEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaterEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaterEventValidationError{}

// Validate checks the field values on CreateWaterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWaterV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 50 {
		return CreateWaterV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetModel()); l < 3 || l > 50 {
		return CreateWaterV1RequestValidationError{
			field:  "Model",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetManufacturer()); l < 3 || l > 50 {
		return CreateWaterV1RequestValidationError{
			field:  "Manufacturer",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetMaterial()); l < 3 || l > 50 {
		return CreateWaterV1RequestValidationError{
			field:  "Material",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
	}

	if val := m.GetSpeed(); val <= 0 || val > 1000 {
		return CreateWaterV1RequestValidationError{
			field:  "Speed",
			reason: "value must be inside range (0, 1000]",
		}
	}

	return nil
}

// CreateWaterV1RequestValidationError is the validation error returned by
// CreateWaterV1Request.Validate if the designated constraints aren't met.
type CreateWaterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWaterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWaterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWaterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWaterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWaterV1RequestValidationError) ErrorName() string {
	return "CreateWaterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWaterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWaterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWaterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWaterV1RequestValidationError{}

// Validate checks the field values on CreateWaterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWaterV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWaterV1ResponseValidationError{
				field:  "Water",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateWaterV1ResponseValidationError is the validation error returned by
// CreateWaterV1Response.Validate if the designated constraints aren't met.
type CreateWaterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWaterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWaterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWaterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWaterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWaterV1ResponseValidationError) ErrorName() string {
	return "CreateWaterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWaterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWaterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWaterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWaterV1ResponseValidationError{}

// Validate checks the field values on DescribeWaterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeWaterV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetWaterId() <= 0 {
		return DescribeWaterV1RequestValidationError{
			field:  "WaterId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeWaterV1RequestValidationError is the validation error returned by
// DescribeWaterV1Request.Validate if the designated constraints aren't met.
type DescribeWaterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWaterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWaterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWaterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWaterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWaterV1RequestValidationError) ErrorName() string {
	return "DescribeWaterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWaterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWaterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWaterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWaterV1RequestValidationError{}

// Validate checks the field values on DescribeWaterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeWaterV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeWaterV1ResponseValidationError{
				field:  "Water",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeWaterV1ResponseValidationError is the validation error returned by
// DescribeWaterV1Response.Validate if the designated constraints aren't met.
type DescribeWaterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWaterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWaterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWaterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWaterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWaterV1ResponseValidationError) ErrorName() string {
	return "DescribeWaterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWaterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWaterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWaterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWaterV1ResponseValidationError{}

// Validate checks the field values on ListWatersV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWatersV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val <= 0 || val > 50 {
		return ListWatersV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 50]",
		}
	}

	if m.GetOffset() < 0 {
		return ListWatersV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// ListWatersV1RequestValidationError is the validation error returned by
// ListWatersV1Request.Validate if the designated constraints aren't met.
type ListWatersV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWatersV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWatersV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWatersV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWatersV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWatersV1RequestValidationError) ErrorName() string {
	return "ListWatersV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWatersV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWatersV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWatersV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWatersV1RequestValidationError{}

// Validate checks the field values on ListWatersV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWatersV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWaters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWatersV1ResponseValidationError{
					field:  fmt.Sprintf("Waters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWatersV1ResponseValidationError is the validation error returned by
// ListWatersV1Response.Validate if the designated constraints aren't met.
type ListWatersV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWatersV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWatersV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWatersV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWatersV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWatersV1ResponseValidationError) ErrorName() string {
	return "ListWatersV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWatersV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWatersV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWatersV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWatersV1ResponseValidationError{}

// Validate checks the field values on RemoveWaterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveWaterV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetWaterId() <= 0 {
		return RemoveWaterV1RequestValidationError{
			field:  "WaterId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveWaterV1RequestValidationError is the validation error returned by
// RemoveWaterV1Request.Validate if the designated constraints aren't met.
type RemoveWaterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWaterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWaterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWaterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWaterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWaterV1RequestValidationError) ErrorName() string {
	return "RemoveWaterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWaterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWaterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWaterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWaterV1RequestValidationError{}

// Validate checks the field values on RemoveWaterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveWaterV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveWaterV1ResponseValidationError is the validation error returned by
// RemoveWaterV1Response.Validate if the designated constraints aren't met.
type RemoveWaterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWaterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWaterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWaterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWaterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWaterV1ResponseValidationError) ErrorName() string {
	return "RemoveWaterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWaterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWaterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWaterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWaterV1ResponseValidationError{}

// Validate checks the field values on UpdateWaterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWaterV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetWaterId() <= 0 {
		return UpdateWaterV1RequestValidationError{
			field:  "WaterId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 50 {
		return UpdateWaterV1RequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
	}

	if val := m.GetSpeed(); val <= 0 || val > 1000 {
		return UpdateWaterV1RequestValidationError{
			field:  "Speed",
			reason: "value must be inside range (0, 1000]",
		}
	}

	return nil
}

// UpdateWaterV1RequestValidationError is the validation error returned by
// UpdateWaterV1Request.Validate if the designated constraints aren't met.
type UpdateWaterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWaterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWaterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWaterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWaterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWaterV1RequestValidationError) ErrorName() string {
	return "UpdateWaterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWaterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWaterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWaterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWaterV1RequestValidationError{}

// Validate checks the field values on UpdateWaterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWaterV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWaterV1ResponseValidationError{
				field:  "Water",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateWaterV1ResponseValidationError is the validation error returned by
// UpdateWaterV1Response.Validate if the designated constraints aren't met.
type UpdateWaterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWaterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWaterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWaterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWaterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWaterV1ResponseValidationError) ErrorName() string {
	return "UpdateWaterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWaterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWaterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWaterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWaterV1ResponseValidationError{}
